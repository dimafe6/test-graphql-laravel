#import user/*.graphql
#import article/*.graphql

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10) @guard

    "Get current user"
    me: User @auth

    "Get Article data"
    article(
        "Article ID"
        id: ID! @eq
    ): Article @find

    "Search articles"
    articles(
        "Search by Article title"
        title: String @where(operator: "like")

        "Search by article content"
        content: String @where(operator: "like")

        "Search by article content or title"
        search: String
        @where(operator: "like", key: "title", clause: "orWhere")
        @where(operator: "like", key: "content", clause: "orWhere")

        orderBy: _ @orderBy(columns: ["created_at", "title", "content"])
    ): [Article!]! @paginate(defaultCount: 10)
}

type Mutation {
    "Register"
    register(input: RegisterUserInput @spread): User! @field(resolver: "RegisterMutator@resolve")

    "Login"
    login(input: LoginInput): User! @field(resolver: "AuthMutator@resolve")

    "Create Article"
    createArticle(
        input: ArticleInput! @spread
    ): Article! @field(resolver: "ArticleMutator@create") @guard @can(ability: "create")

    "Create Article"
    updateArticle(
        id: ID! @eq, input: ArticleInput! @spread
    ): Article @field(resolver: "ArticleMutator@update") @guard @can(ability: "update", query: true)

    "Delete Article"
    deleteArticle(id: ID! @eq): Article @delete @guard @can(ability: "delete", query: true)
}

"""Users article."""
type Article {
  """Unique primary key."""
  id: ID!

  """Article title"""
  title: String!

  """Article content"""
  content: String!

  """Article update date and time"""
  created_at: DateTime!

  """Article update date and time"""
  updated_at: DateTime!

  """User has created this article"""
  author: User!

  """Article image"""
  image: String
}

input ArticleInput {
  """Article title"""
  title: String!

  """Article content"""
  content: String!

  """Article image"""
  image: Upload!
}

"""A paginated list of Article items."""
type ArticlePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Article items."""
  data: [Article!]!
}

"""
A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.
"""
scalar DateTime

input LoginInput {
  """User email"""
  email: String!

  """User password"""
  password: String!
}

type Mutation {
  """Register"""
  register(input: RegisterUserInput): User!

  """Login"""
  login(input: LoginInput): User!

  """Create Article"""
  createArticle(input: ArticleInput!): Article!

  """Create Article"""
  updateArticle(id: ID!, input: ArticleInput!): Article

  """Delete Article"""
  deleteArticle(id: ID!): Article
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Aggregate functions when ordering by a relation without specifying a column.
"""
enum OrderByRelationAggregateFunction {
  """Amount of items."""
  COUNT
}

"""
Aggregate functions when ordering by a relation that may specify a column.
"""
enum OrderByRelationWithColumnAggregateFunction {
  """Average."""
  AVG

  """Minimum."""
  MIN

  """Maximum."""
  MAX

  """Sum."""
  SUM

  """Amount of items."""
  COUNT
}

"""Information about pagination using a Relay style cursor connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """The cursor to continue paginating backwards."""
  startCursor: String

  """The cursor to continue paginating forwards."""
  endCursor: String

  """Total number of nodes in the paginated connection."""
  total: Int!

  """Number of nodes in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the last available page."""
  lastPage: Int!
}

"""Information about pagination using a fully featured paginator."""
type PaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Are there more pages after this one?"""
  hasMorePages: Boolean!

  """Index of the last item in the current page."""
  lastItem: Int

  """Index of the last available page."""
  lastPage: Int!

  """Number of items per page."""
  perPage: Int!

  """Number of total available items."""
  total: Int!
}

"""
Indicates what fields are available at the top level of a query operation.
"""
type Query {
  """Find a single user by an identifying attribute."""
  user(
    """Search by primary key."""
    id: ID

    """Search by email address."""
    email: String
  ): User

  """Get current user"""
  me: User

  """Get Article data"""
  article(
    """Article ID"""
    id: ID!
  ): Article

  """List multiple users."""
  users(
    """Filters by name. Accepts SQL LIKE wildcards `%` and `_`."""
    name: String

    """Limits number of fetched items."""
    first: Int! = 10

    """The offset from which items are returned."""
    page: Int
  ): UserPaginator

  """Search articles"""
  articles(
    """Search by Article title"""
    title: String

    """Search by article content"""
    content: String

    """Search by article content or title"""
    search: String
    orderBy: [QueryArticlesOrderByOrderByClause!]

    """Limits number of fetched items."""
    first: Int! = 10

    """The offset from which items are returned."""
    page: Int
  ): ArticlePaginator
}

"""Allowed column names for Query.articles.orderBy."""
enum QueryArticlesOrderByColumn {
  CREATED_AT
  TITLE
  CONTENT
}

"""Order by clause for Query.articles.orderBy."""
input QueryArticlesOrderByOrderByClause {
  """The column that is used for ordering."""
  column: QueryArticlesOrderByColumn!

  """The direction that is used for ordering."""
  order: SortOrder!
}

input RegisterUserInput {
  """User name"""
  name: String!

  """User email"""
  email: String!

  """User password"""
  password: String!
}

"""Information about pagination using a simple paginator."""
type SimplePaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Index of the last item in the current page."""
  lastItem: Int

  """Number of items per page."""
  perPage: Int!

  """Are there more pages after this one?"""
  hasMorePages: Boolean!
}

"""Directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}

"""
Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec
"""
scalar Upload

"""Account of a person who utilizes this application."""
type User {
  """Unique primary key."""
  id: ID!

  """Non-unique name."""
  name: String!

  """Unique email address."""
  email: String!

  """
  JWT access token
  Not null only for login request
  """
  token: String

  """Email verification date and time"""
  email_verified_at: DateTime

  """User registration date and time"""
  created_at: DateTime!

  """User update date and time"""
  updated_at: DateTime!
  total_articles: Int!

  """List of user articles"""
  articles(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): ArticlePaginator
}

"""A paginated list of User items."""
type UserPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of User items."""
  data: [User!]!
}
